from __future__ import annotations

from collections import ChainMap
from pathlib import Path
from typing import IO, Mapping, Sequence

from wap import __version__, log
from wap.exception import BuildException

# tag names from https://wowwiki-archive.fandom.com/wiki/TOC_format
_OFFICIAL_TAGS = {
    "Interface",
    "Title",
    "Author",
    "Version",
    "Notes",
    "RequiredDeps",  # according to docs, this and the next have the same meaning to wow
    "Dependencies",
    "OptionalDeps",
    "LoadOnDemand",
    "LoadWith",
    "LoadManagers",
    "SavedVariables",
    "DefaultState",
    "Secure",
}

# we will warn about tags not in _OFFICIAL_TAGS that don't have the right prefix
_METADATA_TAG_PREFIX = "X-"


def write_toc(
    toc_path: Path,
    addon_version: str,
    interface_version: str,
    tags: Mapping[str, str],
    files: Sequence[Path],
) -> Path:
    if toc_path.exists():
        if not toc_path.is_file():
            # we don't want to spend too much time deleting a directory (i.e.
            # recursively deleting files) because this is a strange case to begin with.
            # just throw exception
            raise BuildException(
                f"Attempting to overwrite {toc_path}, but it is not a file"
            )
        log.warn(f"Overwriting {toc_path} with new generated TOC file")

    if not tags:
        log.warn("No user-specified tags for TOC file at {toc_path}")

    if not files:
        log.warn(f"No files for TOC file at {toc_path}")

    tag_map: ChainMap[str, str] = ChainMap(tags)

    wap_added_tags = {
        "Version": addon_version,
        "Interface": interface_version,
    }

    for wap_added_tag in wap_added_tags.keys():
        if wap_added_tag in tag_map:
            log.warn(
                f"{wap_added_tag} TOC tag found in configuration, but wap provides "
                "that from config"
            )

    tag_map = tag_map.new_child(wap_added_tags)

    for file in files:
        rooted_file = toc_path.parent / file
        if not rooted_file.is_file():
            log.warn(f'TOC file specifies "{file}", but it does not exist')

    with toc_path.open("w") as toc_file:
        _write_toc_data(
            f=toc_file,
            tags=tag_map,
            files=[file.relative_to(toc_path.parent) for file in files],
        )

    return toc_path


def _write_toc_data(
    f: IO[str],
    tags: Mapping[str, str],
    files: Sequence[Path],
) -> None:
    # put generation comment at top
    f.write(f"# Generated by wap v{__version__}\n\n")

    for tag, value in tags.items():
        f.write(f"## {tag}: {value}\n")
        if tag not in _OFFICIAL_TAGS and not tag.startswith(_METADATA_TAG_PREFIX):
            log.warn(
                f'TOC metadata tag "{tag}" does not have "{_METADATA_TAG_PREFIX}" '
                "prefix"
            )

    f.write("\n")

    for file in files:
        f.write(f"{file}\n")
